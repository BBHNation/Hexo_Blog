{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/SpringBoot+Mybatis初探1.png","path":"images/SpringBoot+Mybatis初探1.png","modified":0,"renderable":0},{"_id":"source/images/Nginx与文件服务器1.png","path":"images/Nginx与文件服务器1.png","modified":0,"renderable":0},{"_id":"source/images/Nginx与文件服务器2.png","path":"images/Nginx与文件服务器2.png","modified":0,"renderable":0},{"_id":"themes/clover/source/css/fonts.scss","path":"css/fonts.scss","modified":0,"renderable":1},{"_id":"themes/clover/source/css/functions.scss","path":"css/functions.scss","modified":0,"renderable":1},{"_id":"themes/clover/source/css/global.scss","path":"css/global.scss","modified":0,"renderable":1},{"_id":"themes/clover/source/css/index.scss","path":"css/index.scss","modified":0,"renderable":1},{"_id":"themes/clover/source/css/layout.scss","path":"css/layout.scss","modified":0,"renderable":1},{"_id":"themes/clover/source/css/mixins.scss","path":"css/mixins.scss","modified":0,"renderable":1},{"_id":"themes/clover/source/css/reset.css","path":"css/reset.css","modified":0,"renderable":1},{"_id":"themes/clover/source/fonts/MaturaMTScriptCapitals.ttf","path":"fonts/MaturaMTScriptCapitals.ttf","modified":0,"renderable":1},{"_id":"source/images/测试.png","path":"images/测试.png","modified":0,"renderable":0},{"_id":"themes/clover/source/fonts/BebasNeue.otf","path":"fonts/BebasNeue.otf","modified":0,"renderable":1},{"_id":"source/images/SpringBoot+Mybatis初探2.png","path":"images/SpringBoot+Mybatis初探2.png","modified":0,"renderable":0},{"_id":"source/images/eginx.png","path":"images/eginx.png","modified":0,"renderable":0},{"_id":"source/images/helloworld.png","path":"images/helloworld.png","modified":0,"renderable":0},{"_id":"source/images/《沙丘》.png","path":"images/《沙丘》.png","modified":0,"renderable":0},{"_id":"source/images/Spring.png","path":"images/Spring.png","modified":0,"renderable":0}],"Cache":[{"_id":"themes/clover/_config.yml","hash":"655465a2b910b2528f7b1bb9b63596bd0d13f410","modified":1544188232505},{"_id":"themes/clover/readme.md","hash":"f06dae0e59fbfdf8d44f12a584a8c13b073a5ed6","modified":1544188232599},{"_id":"themes/clover/languages/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1544188232506},{"_id":"themes/clover/scripts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1544188232599},{"_id":"source/_posts/《沙丘》.md","hash":"c4e4aaded7c6f32372b80b0501adacc9db79ce0f","modified":1544192695678},{"_id":"source/_posts/NGINX和文件服务器.md","hash":"e0093b61a1be265a47ebd059f202f01ed1e39e77","modified":1544188232493},{"_id":"source/_posts/SpringBoot和Mybatis.md","hash":"272e9576440d941db918d449e8ea9d697ea14d63","modified":1544188232493},{"_id":"source/_posts/hello-world.md","hash":"48e0cfb233947f692503bf09632e0d3b5542601f","modified":1544191655585},{"_id":"source/images/SpringBoot+Mybatis初探1.png","hash":"76cc4ca93eb684170f77dc70c7d20d75855751cf","modified":1544188232498},{"_id":"themes/clover/languages/default.yml","hash":"1bd428595cb5d7804374fc554268fb07d3c180b5","modified":1544188232506},{"_id":"themes/clover/languages/zh-CN.yml","hash":"04be74e45b71ccf7b8288fda315af9e9ccbc33f7","modified":1544188232506},{"_id":"themes/clover/layout/about.ejs","hash":"b5f2aa913991788561ac73a78c0ca0eee0c16c6d","modified":1544188232508},{"_id":"themes/clover/layout/archive.ejs","hash":"96a0850bad36d34942124d63b8ef97ee30e518f2","modified":1544188232508},{"_id":"themes/clover/layout/category.ejs","hash":"9669da1b90ab979d7eaec34c45b43285a9fb6ab9","modified":1544188232508},{"_id":"themes/clover/layout/index.ejs","hash":"40a43cc24bd607060cf253497f2411813d311e8d","modified":1544188232508},{"_id":"themes/clover/layout/layout.ejs","hash":"8d28870a73489cb03ec5432423f2915e1d5f06eb","modified":1544188232508},{"_id":"themes/clover/layout/post.ejs","hash":"6492303c001cf39f189c5a436d60298f6ba483aa","modified":1544188232508},{"_id":"themes/clover/scripts/category.js","hash":"14d066502595dfa9b738c49ab974f42888b6580f","modified":1544188232599},{"_id":"themes/clover/scripts/home.js","hash":"39544710966f64cf604faf2d1dfa750d4ac79a78","modified":1544188232599},{"_id":"themes/clover/layout/tag.ejs","hash":"893ba1e1bafcdc3ee2131f431dce15db2c5f5324","modified":1544188232509},{"_id":"themes/clover/scripts/path_url.js","hash":"3fad526f54993612c6a9e6a1bea9dad2894700df","modified":1544188232600},{"_id":"source/images/Nginx与文件服务器1.png","hash":"4197759a36f598a0b646a2f4b0639cb9afd9a92d","modified":1544188232494},{"_id":"source/images/Nginx与文件服务器2.png","hash":"1cfdf8659f8f7fae7c341a18305822ccac040ba2","modified":1544188232495},{"_id":"themes/clover/layout/_partial/article-card.ejs","hash":"d709935e3cc420caec70a37069741b0fe5939e2f","modified":1544188232506},{"_id":"themes/clover/layout/_partial/excerpt.ejs","hash":"b0ad1a2336fcace485e9cd523fb8386c0e0933b5","modified":1544188232507},{"_id":"themes/clover/layout/_partial/article.ejs","hash":"ec72bf2fa003b881e25d3ad002a7a283c3d3339d","modified":1544188232506},{"_id":"themes/clover/layout/_partial/head.ejs","hash":"1e80d18ad2d922a951be88b9a98903be4cc77401","modified":1544188232507},{"_id":"themes/clover/layout/_partial/footer.ejs","hash":"1a15a05f545a5844f7260c5da9643a3858062ffe","modified":1544188232507},{"_id":"themes/clover/layout/_partial/pagination.ejs","hash":"da9474ba8f58d01da1a12786402d119bfff92efc","modified":1544188232507},{"_id":"themes/clover/layout/_partial/nav.ejs","hash":"30179554e9fcb7fdedfcabae8641660256460ab6","modified":1544188232507},{"_id":"themes/clover/layout/_partial/project-card.ejs","hash":"0eaf81701d2bdd9d41000a6047d862ebf2e5067f","modified":1544188232507},{"_id":"themes/clover/source/css/fonts.scss","hash":"8cd5d45127e531a9d64f25359c9a9b4239c639b2","modified":1544188232602},{"_id":"themes/clover/source/css/functions.scss","hash":"7672c6b7bca0bf89cba4b26bcac03ecd380b7502","modified":1544188232603},{"_id":"themes/clover/source/css/global.scss","hash":"544bbf0c3b699a414c4d6ec8556a122727e2f33a","modified":1544188232603},{"_id":"themes/clover/source/css/index.scss","hash":"ff4bd1dd687a746513faf43dc5829a32edb8fc2f","modified":1544188232603},{"_id":"themes/clover/source/css/layout.scss","hash":"33478e6ea726df389aa12fb8edba9b0bf78dd22f","modified":1544188232603},{"_id":"themes/clover/source/css/mixins.scss","hash":"a07b64d6df8b66c508ef14eaacf4edee759371b1","modified":1544188232604},{"_id":"themes/clover/source/css/reset.css","hash":"a1c2e8d00115d0b8ba97ae8e5e9da2f533e752f7","modified":1544188232604},{"_id":"themes/clover/source/fonts/MaturaMTScriptCapitals.ttf","hash":"390898e00ebcd9025a5d8e8d1f6becbe3532695b","modified":1544188232605},{"_id":"source/images/测试.png","hash":"ffd1bf46a3f4b8bcd73a424b60cd132cd5530ef2","modified":1544188232505},{"_id":"themes/clover/source/fonts/BebasNeue.otf","hash":"8f1dc695a6c4bb7f91a32db32928e0da567e82fc","modified":1544188232605},{"_id":"source/images/SpringBoot+Mybatis初探2.png","hash":"b04ef2104ca832c49a3bc07018982f74091e4827","modified":1544188232500},{"_id":"source/images/eginx.png","hash":"5d5d647f1c60fcc9dc29090d437527e7b1d63b79","modified":1544188232502},{"_id":"source/images/helloworld.png","hash":"9d2e6f35cbdd107690e609b70f041782c2fc71ec","modified":1544188232503},{"_id":"source/images/《沙丘》.png","hash":"7a18eaf9228ddcaa02f015a3fc9012b7b1786992","modified":1544192602203},{"_id":"themes/clover/source/css/_partial/about.scss","hash":"53952d9d531280ca98f34b3a74ec5dcf55b105d6","modified":1544188232600},{"_id":"themes/clover/source/css/_partial/article.scss","hash":"bf5f54b458780d9efae21cd9650d23430a6aa7c5","modified":1544188232601},{"_id":"themes/clover/source/css/_partial/footer.scss","hash":"5a3cf1f7c17cddb14f71c4083dfd30b4c02373b2","modified":1544188232601},{"_id":"themes/clover/source/css/_partial/archive.scss","hash":"9e3ca63734ec6cfbad983ad93ae4a38e56d59138","modified":1544188232601},{"_id":"themes/clover/source/css/_partial/nav.scss","hash":"344a5d5dcc3225dc4a3187c0338bccfa6abc680e","modified":1544188232601},{"_id":"themes/clover/source/css/_partial/pagination.scss","hash":"d77a1a841b624bc8d60142e08681b4bc81dce353","modified":1544188232602},{"_id":"themes/clover/source/css/_partial/project-card.scss","hash":"03dd5e5d1da63ef929d0db46964696e0846506c4","modified":1544188232602},{"_id":"themes/clover/source/css/_partial/tagcloud.scss","hash":"4acedec40f7e605cceb84edcded117241f10825f","modified":1544188232602},{"_id":"source/images/Spring.png","hash":"06ac05caa73b5045f08fbe563a09d3a0b0df724b","modified":1544188232497},{"_id":"public/2018/12/07/《沙丘》/index.html","hash":"4bbf83dee335e6a4289cbefbd127ada9bbd448a6","modified":1544192701431},{"_id":"public/2018/12/05/SpringBoot和Mybatis/index.html","hash":"d1f8cfa3aaa8d721cff4e04ef71157d55aff53a0","modified":1544192671434},{"_id":"public/2018/12/05/NGINX和文件服务器/index.html","hash":"c1033670b6e0c5e5e684cdc32ee29afc1dfb7501","modified":1544192671434},{"_id":"public/2018/12/04/hello-world/index.html","hash":"da2a9cf7ee45a99cf2b05f9d48b8c1415f362b0d","modified":1544192671434},{"_id":"public/archives/index.html","hash":"ea6a2aaf4c69d52ae24fa6378a4319842738e36e","modified":1544192671435},{"_id":"public/archives/2018/index.html","hash":"cb491b5a46763386c220a97bff7f279d330ddff2","modified":1544192671435},{"_id":"public/archives/2018/12/index.html","hash":"0993007c9ce05ae96e031ce4eff2d323ba8dc28a","modified":1544192671435},{"_id":"public/categories/Live/index.html","hash":"c31ce4dcf69f154a15e6893f8498c7b4839578d1","modified":1544192671435},{"_id":"public/categories/Tec/index.html","hash":"0bf1e9cdb8a2a239144ebdcdfd6ab5e2bbdba482","modified":1544192671435},{"_id":"public/categories/Life/index.html","hash":"99512f89f512d98984bb78d72fa8edff2688fac3","modified":1544192671435},{"_id":"public/categories/index.html","hash":"629572c636bb87f137a4f6e3156601c1a46e2537","modified":1544192671435},{"_id":"public/index.html","hash":"2079dbb768271202f9d3fc6eaf0a7f8c23db3125","modified":1544192671435},{"_id":"public/tags/PROGRAMING-LINUX/index.html","hash":"e6c70b992f61ea7e05298329fab01743b81a2edb","modified":1544192671435},{"_id":"public/images/SpringBoot+Mybatis初探1.png","hash":"76cc4ca93eb684170f77dc70c7d20d75855751cf","modified":1544192671441},{"_id":"public/fonts/MaturaMTScriptCapitals.ttf","hash":"390898e00ebcd9025a5d8e8d1f6becbe3532695b","modified":1544192671441},{"_id":"public/images/Nginx与文件服务器1.png","hash":"4197759a36f598a0b646a2f4b0639cb9afd9a92d","modified":1544192671463},{"_id":"public/images/Nginx与文件服务器2.png","hash":"1cfdf8659f8f7fae7c341a18305822ccac040ba2","modified":1544192671463},{"_id":"public/fonts/BebasNeue.otf","hash":"8f1dc695a6c4bb7f91a32db32928e0da567e82fc","modified":1544192671464},{"_id":"public/css/fonts.css","hash":"1f3cfa94ed0422c73d97dad7a941da2bebdf47cb","modified":1544192671468},{"_id":"public/css/global.css","hash":"dc63c7fca8227c163e052b302df911109b2e49eb","modified":1544192671468},{"_id":"public/css/functions.css","hash":"2a89a6838495e4a60257a725710e923aee059534","modified":1544192671468},{"_id":"public/css/index.css","hash":"98aa7f3eb95e95d38fa7978d336cf2c5ebea5854","modified":1544192671468},{"_id":"public/css/layout.css","hash":"1858e0a92b23999ec0692e6d53728597917304b9","modified":1544192671468},{"_id":"public/css/mixins.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1544192671468},{"_id":"public/css/reset.css","hash":"a1c2e8d00115d0b8ba97ae8e5e9da2f533e752f7","modified":1544192671468},{"_id":"public/images/测试.png","hash":"ffd1bf46a3f4b8bcd73a424b60cd132cd5530ef2","modified":1544192671470},{"_id":"public/images/SpringBoot+Mybatis初探2.png","hash":"b04ef2104ca832c49a3bc07018982f74091e4827","modified":1544192671472},{"_id":"public/images/eginx.png","hash":"5d5d647f1c60fcc9dc29090d437527e7b1d63b79","modified":1544192671472},{"_id":"public/images/helloworld.png","hash":"9d2e6f35cbdd107690e609b70f041782c2fc71ec","modified":1544192671472},{"_id":"public/images/《沙丘》.png","hash":"7a18eaf9228ddcaa02f015a3fc9012b7b1786992","modified":1544192671472},{"_id":"public/images/Spring.png","hash":"06ac05caa73b5045f08fbe563a09d3a0b0df724b","modified":1544192671496}],"Category":[{"name":"Live","_id":"cjpe4g2mh00026fl38ru3xkwg"},{"name":"Tec","_id":"cjpe4g2mp00066fl3f7fe2zje"},{"name":"Life","_id":"cjpe4g2mt000a6fl3fvaf9dzc"}],"Data":[],"Page":[],"Post":[{"title":"书记《沙丘》","date":"2018-12-07T14:09:04.000Z","excerpt":"","photos":["/images/《沙丘》.png"],"_content":"\n分封制度下，一个人的宿命。\n整本书塑造了一个全新的世界，在这个世界中，人类掌握了星际航行的技术，但是人工智能被禁止（圣战：人工智能与人类）。在圣战之后，人类群体（作为宇宙中唯一的智能）以帝国形式存在（虽然这个设计我不太喜欢，但是这让整个故事更加的有背景），帝国中的人类分为不同的等级和家族，不同的等级和家族会有不同的特质，而这些品质并不是什么超能力，只是通过训练得出的效果。\n## 人物分析\n* 保罗·厄崔迪（主角，公爵之子）\n* 雷托·厄崔迪（保罗母亲，公爵）\n* 杰西卡夫人（保罗的母亲）\n* 哥尼·哈莱克（厄崔迪家族的首要军事官）\n* 杜菲·哈瓦特\n* 列特·崔恩斯\n* 菲德-罗萨·哈克南（书中最大反派的侄子，准男爵）\n\n\n## 故事梗概\n* 厄崔迪一家族被贬到一个名叫厄拉科斯星球，这个星球之前是由哈克南人统治着的，但是他们走了。\n\n\n* 雷托·厄崔迪作为家族的公爵，有着统治星球的权利，在星球上有整个宇宙都为之向往的香料采集场，但是，随之而来的也有着无比的危险——沙虫。雷托一边要防范来自哈克南的攻击和暗算，一方面要发动星球上百废待兴的资源来开采香料并使得家族再次强大。但是家族中有人背叛了他——是他一直很信任的岳医生。岳医生的爱人也是贝尼·杰瑟里特，但是被哈克南人杀害，为此他计划牺牲男爵，在其牙齿中装入一个毒气弹，送往哈克南男爵面前，使其杀死哈克南男爵的目的得逞。\n\n\n* 保罗·厄崔迪从小接受训练，是由贝尼·杰瑟里特母亲生下来的男孩，是一个可能成为魁萨茨·哈德拉克的人。因为贝尼·杰瑟里特一直注重着基因筛选工程，在保罗这里，很可能出现最终的结果。\n\n\n* 雷托被背叛之后，被毒气弹毒死，厄崔迪家族的厄拉科斯星球再次被哈克南人所统治，而且是有皇帝所支持的哈克南人，皇帝出于担心厄崔迪家族能够训练出足够抗衡皇帝军团的军队的心理来援助哈克南人，并且皇帝也可以获得想要的香料。\n\n\n* 但是保罗和其母亲逃脱了，在很多人的帮助下，他们母子（还有腹中的保罗妹妹）进入到了厄拉科斯原住民，沙漠之族弗雷曼人的团体中。而保罗在父亲死后，戴上了公爵戒指，并且自身的能力也被开启，他意识到自己有预测未来的能力，宇宙在他超人的分析能力和观察能力之下变成了一条条未来的道路，他可以看到很多可能的未来，也可以为此作出选择。\n\n\n* 在弗雷曼人民中，保罗和其母亲渐渐融入，保罗的母亲成为了族人的圣母，她喝下了圣水（来自沙虫死去的水，有非常的毒性，但是圣母有能力解析其分子构造，将毒性去除）。保罗渐渐成为了族人中流传的传说中的李桑·阿尔-盖布——也就是拯救弗雷曼一族的人（但是这个传说其实是有贝尼·杰瑟里特前人传递给弗雷曼人的）。弗雷曼人生活在沙漠中，在厄拉科斯，沙漠就像是地球上的海，海中巨兽沙虫守护着这一片海，但是弗雷曼人有能力驾驭沙虫，将沙虫为己用，而且其有能力杀死沙虫，这样随着沙虫而来的香料也会消失（能够摧毁它的人才能真正拥有它）。弗雷曼人战斗力超群，生活在险恶的环境造就了他们超人的战斗力，所以皇帝正是害怕他们会被厄崔迪家族所用，才暗中增援哈克南人攻打厄拉科斯的厄崔迪。\n","source":"_posts/《沙丘》.md","raw":"---\ntitle: 书记《沙丘》\ndate: 2018-12-07 22:09:04\nexcerpt: 分封制度下，一个人的宿命。整本书塑造了一个全新的世界，在这个世界中，人类掌握了星际航行的技术，但是人工智能被禁止（圣战：人工智能与人类）。\ncategory: Live\nphotos: /images/《沙丘》.png\n---\n\n分封制度下，一个人的宿命。\n整本书塑造了一个全新的世界，在这个世界中，人类掌握了星际航行的技术，但是人工智能被禁止（圣战：人工智能与人类）。在圣战之后，人类群体（作为宇宙中唯一的智能）以帝国形式存在（虽然这个设计我不太喜欢，但是这让整个故事更加的有背景），帝国中的人类分为不同的等级和家族，不同的等级和家族会有不同的特质，而这些品质并不是什么超能力，只是通过训练得出的效果。\n## 人物分析\n* 保罗·厄崔迪（主角，公爵之子）\n* 雷托·厄崔迪（保罗母亲，公爵）\n* 杰西卡夫人（保罗的母亲）\n* 哥尼·哈莱克（厄崔迪家族的首要军事官）\n* 杜菲·哈瓦特\n* 列特·崔恩斯\n* 菲德-罗萨·哈克南（书中最大反派的侄子，准男爵）\n\n\n## 故事梗概\n* 厄崔迪一家族被贬到一个名叫厄拉科斯星球，这个星球之前是由哈克南人统治着的，但是他们走了。\n\n\n* 雷托·厄崔迪作为家族的公爵，有着统治星球的权利，在星球上有整个宇宙都为之向往的香料采集场，但是，随之而来的也有着无比的危险——沙虫。雷托一边要防范来自哈克南的攻击和暗算，一方面要发动星球上百废待兴的资源来开采香料并使得家族再次强大。但是家族中有人背叛了他——是他一直很信任的岳医生。岳医生的爱人也是贝尼·杰瑟里特，但是被哈克南人杀害，为此他计划牺牲男爵，在其牙齿中装入一个毒气弹，送往哈克南男爵面前，使其杀死哈克南男爵的目的得逞。\n\n\n* 保罗·厄崔迪从小接受训练，是由贝尼·杰瑟里特母亲生下来的男孩，是一个可能成为魁萨茨·哈德拉克的人。因为贝尼·杰瑟里特一直注重着基因筛选工程，在保罗这里，很可能出现最终的结果。\n\n\n* 雷托被背叛之后，被毒气弹毒死，厄崔迪家族的厄拉科斯星球再次被哈克南人所统治，而且是有皇帝所支持的哈克南人，皇帝出于担心厄崔迪家族能够训练出足够抗衡皇帝军团的军队的心理来援助哈克南人，并且皇帝也可以获得想要的香料。\n\n\n* 但是保罗和其母亲逃脱了，在很多人的帮助下，他们母子（还有腹中的保罗妹妹）进入到了厄拉科斯原住民，沙漠之族弗雷曼人的团体中。而保罗在父亲死后，戴上了公爵戒指，并且自身的能力也被开启，他意识到自己有预测未来的能力，宇宙在他超人的分析能力和观察能力之下变成了一条条未来的道路，他可以看到很多可能的未来，也可以为此作出选择。\n\n\n* 在弗雷曼人民中，保罗和其母亲渐渐融入，保罗的母亲成为了族人的圣母，她喝下了圣水（来自沙虫死去的水，有非常的毒性，但是圣母有能力解析其分子构造，将毒性去除）。保罗渐渐成为了族人中流传的传说中的李桑·阿尔-盖布——也就是拯救弗雷曼一族的人（但是这个传说其实是有贝尼·杰瑟里特前人传递给弗雷曼人的）。弗雷曼人生活在沙漠中，在厄拉科斯，沙漠就像是地球上的海，海中巨兽沙虫守护着这一片海，但是弗雷曼人有能力驾驭沙虫，将沙虫为己用，而且其有能力杀死沙虫，这样随着沙虫而来的香料也会消失（能够摧毁它的人才能真正拥有它）。弗雷曼人战斗力超群，生活在险恶的环境造就了他们超人的战斗力，所以皇帝正是害怕他们会被厄崔迪家族所用，才暗中增援哈克南人攻打厄拉科斯的厄崔迪。\n","slug":"《沙丘》","published":1,"updated":"2018-12-07T14:24:55.678Z","_id":"cjpe4g2m500006fl3qce1cxgx","comments":1,"layout":"post","link":"","content":"<p>分封制度下，一个人的宿命。<br>整本书塑造了一个全新的世界，在这个世界中，人类掌握了星际航行的技术，但是人工智能被禁止（圣战：人工智能与人类）。在圣战之后，人类群体（作为宇宙中唯一的智能）以帝国形式存在（虽然这个设计我不太喜欢，但是这让整个故事更加的有背景），帝国中的人类分为不同的等级和家族，不同的等级和家族会有不同的特质，而这些品质并不是什么超能力，只是通过训练得出的效果。</p>\n<h2 id=\"人物分析\"><a href=\"#人物分析\" class=\"headerlink\" title=\"人物分析\"></a>人物分析</h2><ul>\n<li>保罗·厄崔迪（主角，公爵之子）</li>\n<li>雷托·厄崔迪（保罗母亲，公爵）</li>\n<li>杰西卡夫人（保罗的母亲）</li>\n<li>哥尼·哈莱克（厄崔迪家族的首要军事官）</li>\n<li>杜菲·哈瓦特</li>\n<li>列特·崔恩斯</li>\n<li>菲德-罗萨·哈克南（书中最大反派的侄子，准男爵）</li>\n</ul>\n<h2 id=\"故事梗概\"><a href=\"#故事梗概\" class=\"headerlink\" title=\"故事梗概\"></a>故事梗概</h2><ul>\n<li>厄崔迪一家族被贬到一个名叫厄拉科斯星球，这个星球之前是由哈克南人统治着的，但是他们走了。</li>\n</ul>\n<ul>\n<li>雷托·厄崔迪作为家族的公爵，有着统治星球的权利，在星球上有整个宇宙都为之向往的香料采集场，但是，随之而来的也有着无比的危险——沙虫。雷托一边要防范来自哈克南的攻击和暗算，一方面要发动星球上百废待兴的资源来开采香料并使得家族再次强大。但是家族中有人背叛了他——是他一直很信任的岳医生。岳医生的爱人也是贝尼·杰瑟里特，但是被哈克南人杀害，为此他计划牺牲男爵，在其牙齿中装入一个毒气弹，送往哈克南男爵面前，使其杀死哈克南男爵的目的得逞。</li>\n</ul>\n<ul>\n<li>保罗·厄崔迪从小接受训练，是由贝尼·杰瑟里特母亲生下来的男孩，是一个可能成为魁萨茨·哈德拉克的人。因为贝尼·杰瑟里特一直注重着基因筛选工程，在保罗这里，很可能出现最终的结果。</li>\n</ul>\n<ul>\n<li>雷托被背叛之后，被毒气弹毒死，厄崔迪家族的厄拉科斯星球再次被哈克南人所统治，而且是有皇帝所支持的哈克南人，皇帝出于担心厄崔迪家族能够训练出足够抗衡皇帝军团的军队的心理来援助哈克南人，并且皇帝也可以获得想要的香料。</li>\n</ul>\n<ul>\n<li>但是保罗和其母亲逃脱了，在很多人的帮助下，他们母子（还有腹中的保罗妹妹）进入到了厄拉科斯原住民，沙漠之族弗雷曼人的团体中。而保罗在父亲死后，戴上了公爵戒指，并且自身的能力也被开启，他意识到自己有预测未来的能力，宇宙在他超人的分析能力和观察能力之下变成了一条条未来的道路，他可以看到很多可能的未来，也可以为此作出选择。</li>\n</ul>\n<ul>\n<li>在弗雷曼人民中，保罗和其母亲渐渐融入，保罗的母亲成为了族人的圣母，她喝下了圣水（来自沙虫死去的水，有非常的毒性，但是圣母有能力解析其分子构造，将毒性去除）。保罗渐渐成为了族人中流传的传说中的李桑·阿尔-盖布——也就是拯救弗雷曼一族的人（但是这个传说其实是有贝尼·杰瑟里特前人传递给弗雷曼人的）。弗雷曼人生活在沙漠中，在厄拉科斯，沙漠就像是地球上的海，海中巨兽沙虫守护着这一片海，但是弗雷曼人有能力驾驭沙虫，将沙虫为己用，而且其有能力杀死沙虫，这样随着沙虫而来的香料也会消失（能够摧毁它的人才能真正拥有它）。弗雷曼人战斗力超群，生活在险恶的环境造就了他们超人的战斗力，所以皇帝正是害怕他们会被厄崔迪家族所用，才暗中增援哈克南人攻打厄拉科斯的厄崔迪。</li>\n</ul>\n","site":{"data":{}},"more":"<p>分封制度下，一个人的宿命。<br>整本书塑造了一个全新的世界，在这个世界中，人类掌握了星际航行的技术，但是人工智能被禁止（圣战：人工智能与人类）。在圣战之后，人类群体（作为宇宙中唯一的智能）以帝国形式存在（虽然这个设计我不太喜欢，但是这让整个故事更加的有背景），帝国中的人类分为不同的等级和家族，不同的等级和家族会有不同的特质，而这些品质并不是什么超能力，只是通过训练得出的效果。</p>\n<h2 id=\"人物分析\"><a href=\"#人物分析\" class=\"headerlink\" title=\"人物分析\"></a>人物分析</h2><ul>\n<li>保罗·厄崔迪（主角，公爵之子）</li>\n<li>雷托·厄崔迪（保罗母亲，公爵）</li>\n<li>杰西卡夫人（保罗的母亲）</li>\n<li>哥尼·哈莱克（厄崔迪家族的首要军事官）</li>\n<li>杜菲·哈瓦特</li>\n<li>列特·崔恩斯</li>\n<li>菲德-罗萨·哈克南（书中最大反派的侄子，准男爵）</li>\n</ul>\n<h2 id=\"故事梗概\"><a href=\"#故事梗概\" class=\"headerlink\" title=\"故事梗概\"></a>故事梗概</h2><ul>\n<li>厄崔迪一家族被贬到一个名叫厄拉科斯星球，这个星球之前是由哈克南人统治着的，但是他们走了。</li>\n</ul>\n<ul>\n<li>雷托·厄崔迪作为家族的公爵，有着统治星球的权利，在星球上有整个宇宙都为之向往的香料采集场，但是，随之而来的也有着无比的危险——沙虫。雷托一边要防范来自哈克南的攻击和暗算，一方面要发动星球上百废待兴的资源来开采香料并使得家族再次强大。但是家族中有人背叛了他——是他一直很信任的岳医生。岳医生的爱人也是贝尼·杰瑟里特，但是被哈克南人杀害，为此他计划牺牲男爵，在其牙齿中装入一个毒气弹，送往哈克南男爵面前，使其杀死哈克南男爵的目的得逞。</li>\n</ul>\n<ul>\n<li>保罗·厄崔迪从小接受训练，是由贝尼·杰瑟里特母亲生下来的男孩，是一个可能成为魁萨茨·哈德拉克的人。因为贝尼·杰瑟里特一直注重着基因筛选工程，在保罗这里，很可能出现最终的结果。</li>\n</ul>\n<ul>\n<li>雷托被背叛之后，被毒气弹毒死，厄崔迪家族的厄拉科斯星球再次被哈克南人所统治，而且是有皇帝所支持的哈克南人，皇帝出于担心厄崔迪家族能够训练出足够抗衡皇帝军团的军队的心理来援助哈克南人，并且皇帝也可以获得想要的香料。</li>\n</ul>\n<ul>\n<li>但是保罗和其母亲逃脱了，在很多人的帮助下，他们母子（还有腹中的保罗妹妹）进入到了厄拉科斯原住民，沙漠之族弗雷曼人的团体中。而保罗在父亲死后，戴上了公爵戒指，并且自身的能力也被开启，他意识到自己有预测未来的能力，宇宙在他超人的分析能力和观察能力之下变成了一条条未来的道路，他可以看到很多可能的未来，也可以为此作出选择。</li>\n</ul>\n<ul>\n<li>在弗雷曼人民中，保罗和其母亲渐渐融入，保罗的母亲成为了族人的圣母，她喝下了圣水（来自沙虫死去的水，有非常的毒性，但是圣母有能力解析其分子构造，将毒性去除）。保罗渐渐成为了族人中流传的传说中的李桑·阿尔-盖布——也就是拯救弗雷曼一族的人（但是这个传说其实是有贝尼·杰瑟里特前人传递给弗雷曼人的）。弗雷曼人生活在沙漠中，在厄拉科斯，沙漠就像是地球上的海，海中巨兽沙虫守护着这一片海，但是弗雷曼人有能力驾驭沙虫，将沙虫为己用，而且其有能力杀死沙虫，这样随着沙虫而来的香料也会消失（能够摧毁它的人才能真正拥有它）。弗雷曼人战斗力超群，生活在险恶的环境造就了他们超人的战斗力，所以皇帝正是害怕他们会被厄崔迪家族所用，才暗中增援哈克南人攻打厄拉科斯的厄崔迪。</li>\n</ul>\n"},{"title":"NGINX和文件服务器","excerpt":"","date":"2018-12-05T03:13:27.000Z","photos":["/images/eginx.png"],"_content":"\n\n[参考这一篇简书](https://www.jianshu.com/p/95602720e7c8)\n## 前言\n本篇博客的目的是记录使用Nginx搭建文件服务器的过程。\n主要分为三个步骤：\n1. 安装Nginx\n2. 配置Nginx\n3. 使用和测试\n\t\n## 安装Nginx\n[这里是官方的安装指导](https://www.nginx.com/resources/wiki/start/topics/tutorials/install/)然而好像并没有Mac os下的安装教程\n[使用brew安装nginx](https://www.jianshu.com/p/6c7cb820a020)\n使用`brew install nginx`来安装nginx。\n![](/images/Nginx与文件服务器1.png)\n## 配置Nginx\n查看nginx版本\n\n```\nnginx -v\n```\n\n关闭nginx服务\n\n```\nsudo brew services stop nginx\n```\n\n重新加载nginx\n\n```\nnginx -s reload\n```\n\n停止nginx\n\n ```\n nginx -s stop\n ```\n \n\n> 上述只是一些简单的操作，实际配置为文件服务器，我们还需要配置文件conf  \n> [这里是一个完善的配置修改和测试](http://www.cnblogs.com/toSeek/p/6183250.html)  \n\n为了测试方便，我们先随便在一个目录下新建一个文件夹来装文件，让nginx来访问这个目录。\n我的文件目录是：**/Users/MRWhite/FileServer**\nOK 开始配置：\n**vim /usr/local/etc/nginx/nginx.conf**\n\n在http标签里面加入了三句：\n\n```\nhttp {\n    autoindex on; // show list\n    autoindex_exact_size on; // show file size\n    autoindex_localtime on; // show file time\n}\n```\n\n然后把server里面修改为类似下面：\n\n```\n    server {\n        listen       8080;\n        server_name  localhost;\n        root\t     /Users/MRWhite/FileServer/; # add file root\n        location / {\n            # root   html;\n            # index  index.html index.htm;\n        }\n\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n```\n\n## 测试\n然后重启刷新一下吧！\n`termital: nginx -s reload`\n这时候打开localhost:8080就可以看到文件结构：\n\n![](/images/Nginx与文件服务器2.png)","source":"_posts/NGINX和文件服务器.md","raw":"---\ntitle: NGINX和文件服务器\nexcerpt: 本篇博客的目的是记录使用Nginx搭建文件服务器的过程。\ndate: 2018-12-05 11:13:27\ntags: PROGRAMING/LINUX\nphotos: /images/eginx.png\ncategory: Tec\n---\n\n\n[参考这一篇简书](https://www.jianshu.com/p/95602720e7c8)\n## 前言\n本篇博客的目的是记录使用Nginx搭建文件服务器的过程。\n主要分为三个步骤：\n1. 安装Nginx\n2. 配置Nginx\n3. 使用和测试\n\t\n## 安装Nginx\n[这里是官方的安装指导](https://www.nginx.com/resources/wiki/start/topics/tutorials/install/)然而好像并没有Mac os下的安装教程\n[使用brew安装nginx](https://www.jianshu.com/p/6c7cb820a020)\n使用`brew install nginx`来安装nginx。\n![](/images/Nginx与文件服务器1.png)\n## 配置Nginx\n查看nginx版本\n\n```\nnginx -v\n```\n\n关闭nginx服务\n\n```\nsudo brew services stop nginx\n```\n\n重新加载nginx\n\n```\nnginx -s reload\n```\n\n停止nginx\n\n ```\n nginx -s stop\n ```\n \n\n> 上述只是一些简单的操作，实际配置为文件服务器，我们还需要配置文件conf  \n> [这里是一个完善的配置修改和测试](http://www.cnblogs.com/toSeek/p/6183250.html)  \n\n为了测试方便，我们先随便在一个目录下新建一个文件夹来装文件，让nginx来访问这个目录。\n我的文件目录是：**/Users/MRWhite/FileServer**\nOK 开始配置：\n**vim /usr/local/etc/nginx/nginx.conf**\n\n在http标签里面加入了三句：\n\n```\nhttp {\n    autoindex on; // show list\n    autoindex_exact_size on; // show file size\n    autoindex_localtime on; // show file time\n}\n```\n\n然后把server里面修改为类似下面：\n\n```\n    server {\n        listen       8080;\n        server_name  localhost;\n        root\t     /Users/MRWhite/FileServer/; # add file root\n        location / {\n            # root   html;\n            # index  index.html index.htm;\n        }\n\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n```\n\n## 测试\n然后重启刷新一下吧！\n`termital: nginx -s reload`\n这时候打开localhost:8080就可以看到文件结构：\n\n![](/images/Nginx与文件服务器2.png)","slug":"NGINX和文件服务器","published":1,"updated":"2018-12-07T13:10:32.493Z","comments":1,"layout":"post","link":"","_id":"cjpe4g2mb00016fl3v4fx1q5q","content":"<p><a href=\"https://www.jianshu.com/p/95602720e7c8\" target=\"_blank\" rel=\"noopener\">参考这一篇简书</a></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本篇博客的目的是记录使用Nginx搭建文件服务器的过程。<br>主要分为三个步骤：</p>\n<ol>\n<li>安装Nginx</li>\n<li>配置Nginx</li>\n<li>使用和测试</li>\n</ol>\n<h2 id=\"安装Nginx\"><a href=\"#安装Nginx\" class=\"headerlink\" title=\"安装Nginx\"></a>安装Nginx</h2><p><a href=\"https://www.nginx.com/resources/wiki/start/topics/tutorials/install/\" target=\"_blank\" rel=\"noopener\">这里是官方的安装指导</a>然而好像并没有Mac os下的安装教程<br><a href=\"https://www.jianshu.com/p/6c7cb820a020\" target=\"_blank\" rel=\"noopener\">使用brew安装nginx</a><br>使用<code>brew install nginx</code>来安装nginx。<br><img src=\"/images/Nginx与文件服务器1.png\" alt=\"\"></p>\n<h2 id=\"配置Nginx\"><a href=\"#配置Nginx\" class=\"headerlink\" title=\"配置Nginx\"></a>配置Nginx</h2><p>查看nginx版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -v</span><br></pre></td></tr></table></figure>\n<p>关闭nginx服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo brew services stop nginx</span><br></pre></td></tr></table></figure>\n<p>重新加载nginx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n<p>停止nginx</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s stop</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>上述只是一些简单的操作，实际配置为文件服务器，我们还需要配置文件conf<br><a href=\"http://www.cnblogs.com/toSeek/p/6183250.html\" target=\"_blank\" rel=\"noopener\">这里是一个完善的配置修改和测试</a>  </p>\n</blockquote>\n<p>为了测试方便，我们先随便在一个目录下新建一个文件夹来装文件，让nginx来访问这个目录。<br>我的文件目录是：<strong>/Users/MRWhite/FileServer</strong><br>OK 开始配置：<br><strong>vim /usr/local/etc/nginx/nginx.conf</strong></p>\n<p>在http标签里面加入了三句：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    autoindex on; // show list</span><br><span class=\"line\">    autoindex_exact_size on; // show file size</span><br><span class=\"line\">    autoindex_localtime on; // show file time</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后把server里面修改为类似下面：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       8080;</span><br><span class=\"line\">    server_name  localhost;</span><br><span class=\"line\">    root\t     /Users/MRWhite/FileServer/; # add file root</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        # root   html;</span><br><span class=\"line\">        # index  index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">    location = /50x.html &#123;</span><br><span class=\"line\">        root   html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>然后重启刷新一下吧！<br><code>termital: nginx -s reload</code><br>这时候打开localhost:8080就可以看到文件结构：</p>\n<p><img src=\"/images/Nginx与文件服务器2.png\" alt=\"\"></p>\n","site":{"data":{}},"more":"<p><a href=\"https://www.jianshu.com/p/95602720e7c8\" target=\"_blank\" rel=\"noopener\">参考这一篇简书</a></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本篇博客的目的是记录使用Nginx搭建文件服务器的过程。<br>主要分为三个步骤：</p>\n<ol>\n<li>安装Nginx</li>\n<li>配置Nginx</li>\n<li>使用和测试</li>\n</ol>\n<h2 id=\"安装Nginx\"><a href=\"#安装Nginx\" class=\"headerlink\" title=\"安装Nginx\"></a>安装Nginx</h2><p><a href=\"https://www.nginx.com/resources/wiki/start/topics/tutorials/install/\" target=\"_blank\" rel=\"noopener\">这里是官方的安装指导</a>然而好像并没有Mac os下的安装教程<br><a href=\"https://www.jianshu.com/p/6c7cb820a020\" target=\"_blank\" rel=\"noopener\">使用brew安装nginx</a><br>使用<code>brew install nginx</code>来安装nginx。<br><img src=\"/images/Nginx与文件服务器1.png\" alt=\"\"></p>\n<h2 id=\"配置Nginx\"><a href=\"#配置Nginx\" class=\"headerlink\" title=\"配置Nginx\"></a>配置Nginx</h2><p>查看nginx版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -v</span><br></pre></td></tr></table></figure>\n<p>关闭nginx服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo brew services stop nginx</span><br></pre></td></tr></table></figure>\n<p>重新加载nginx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n<p>停止nginx</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s stop</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>上述只是一些简单的操作，实际配置为文件服务器，我们还需要配置文件conf<br><a href=\"http://www.cnblogs.com/toSeek/p/6183250.html\" target=\"_blank\" rel=\"noopener\">这里是一个完善的配置修改和测试</a>  </p>\n</blockquote>\n<p>为了测试方便，我们先随便在一个目录下新建一个文件夹来装文件，让nginx来访问这个目录。<br>我的文件目录是：<strong>/Users/MRWhite/FileServer</strong><br>OK 开始配置：<br><strong>vim /usr/local/etc/nginx/nginx.conf</strong></p>\n<p>在http标签里面加入了三句：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    autoindex on; // show list</span><br><span class=\"line\">    autoindex_exact_size on; // show file size</span><br><span class=\"line\">    autoindex_localtime on; // show file time</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后把server里面修改为类似下面：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       8080;</span><br><span class=\"line\">    server_name  localhost;</span><br><span class=\"line\">    root\t     /Users/MRWhite/FileServer/; # add file root</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        # root   html;</span><br><span class=\"line\">        # index  index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">    location = /50x.html &#123;</span><br><span class=\"line\">        root   html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>然后重启刷新一下吧！<br><code>termital: nginx -s reload</code><br>这时候打开localhost:8080就可以看到文件结构：</p>\n<p><img src=\"/images/Nginx与文件服务器2.png\" alt=\"\"></p>\n"},{"title":"SpringBoot和Mybatis","date":"2018-12-05T06:48:36.000Z","excerpt":"","photos":["/images/Spring.png"],"_content":"## 前言\n整个SpringBoot非常方便的可以实现Restful服务，然而在实际的应用中，实现Restful服务只是表面，如果需要运营起来，需要数据层的支持。目前服务端的数据层包括关系型数据库例如MySQL与非关系型数据库例如MangoDB。非关系型数据库可能更加方便实现对象存储，对应用编码更加方便，但是对底层存储的理解不利，所以在刚开始还是推荐使用关系型数据库。\n这里我们将使用SpringBoot的Restful项目来结合Mybatis来实现一个有数据存储的Restful服务。\n## Mybatis是什么？\n[这里是Mybatis的介绍](http://www.mybatis.org/mybatis-3/zh/index.html)\nMyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。\n简言之：MyBatis可以方便的帮助JAVA应用使用关系型数据库。\n## 写代码之前\n在实际代码之前，我们需要给项目配置Mybatis，这里的项目管理使用的maven管理，有一个pom.xml来管理依赖，所以我们开始吧：\n给项目加入MyBatis依赖\n```\n<!--加入mybatis的支持-->\n<dependency>\n\t<groupId>org.mybatis.spring.boot</groupId>\n\t<artifactId>mybatis-spring-boot-starter</artifactId>\n\t<version>1.1.1</version>\n</dependency>\n```\n给项目加入MySQL连接的依赖\n```\n<!--加入mysql connector-->\n<dependency>\n  <groupId>mysql</groupId>\n  <artifactId>mysql-connector-java</artifactId>\n</dependency>\n```\n在加入依赖之后，需要做的是首先是配置数据库端口和用户\n当然，我这里使用的是MySQL来作为数据库。端口是3306，用户是root。\n\n所以开始配置：\n[这里是一个参考](https://blog.csdn.net/Winter_chen001/article/details/78622141)\n[这里是一个更好的参考](https://www.bysocket.com/?p=1610)\n\n\n完成数据库相关配置之后，我们需要在Spring项目中完成数据库的连接配置，不然Spring如何知道该连接哪个数据库呢。\n\n- 在application.properties中添加下面的数据（如果没有改文件，请在java平级建立一个resource文件夹下新建一个改文件）\n```\nserver.port=5000\n########################################################\n###datasource\n########################################################\nspring.datasource.url = jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=UTF-8\nspring.datasource.username = root\nspring.datasource.password = seven107001\nspring.datasource.driverClassName = com.mysql.jdbc.Driver\nspring.datasource.max-active=20\nspring.datasource.max-idle=8\nspring.datasource.min-idle=8\nspring.datasource.initial-size=10\n```\n然后SpringBoot就知道用什么（依赖）去连接哪个数据库（配置）了。\n\n## 开始编码吧！\n我们在源代码里面加入dao层，并加入一个Mapper。（注意mapper是一个Interface）\n![](/images/SpringBoot+Mybatis初探1.png)\n在Mapper中的代码如下：\n![](/images/SpringBoot+Mybatis初探2.png)\n```\npackage blog.dao;\n\nimport blog.domain.BlogItem;\nimport org.apache.ibatis.annotations.Insert;\nimport org.apache.ibatis.annotations.Mapper;\nimport org.apache.ibatis.annotations.Param;\nimport org.apache.ibatis.annotations.Select;\n\nimport java.util.LinkedList;\n\n@Mapper\npublic interface BlogMapper {\n    @Select(\"SELECT * FROM blogs\")\n    LinkedList<BlogItem> getAllBlogItem();\n\n    @Insert(\"INSERT INTO blogs (title, subTitle, summary, content, dateString) VALUES(#{title}, #{subTitle}, #{summary}, #{content}, #{dateString})\")\n    int insert(@Param(\"title\") String title,\n               @Param(\"subTitle\") String subTitle,\n               @Param(\"summary\") String summary,\n               @Param(\"content\") String content,\n               @Param(\"dateString\") String dateString);\n}\n```\n是不是很简单，我们已经用注释的方式完成了从数据库获取和插入的操作。\n\n## 测试\n1. 新建一个Test文件，并在类上加注释：\n```\n@RunWith(SpringRunner.class)\n@SpringBootTest(classes = App.class, webEnvironment = SpringBootTest.WebEnvironment.**RANDOM_PORT**)\n```\n因为使用SpringBoot来跑，所以这里测试需要有一个Application类传入，随机端口。\n\n2. 然后在类中加入一个自动注入的Mapper：\n```\n@Autowired\nprivate BlogMapper mapper;\n```\n这时候mapper我们就不需要自己去初始化了，毕竟自动注入\n\n3. 最后我们写一个测试方法吧：\n```\n@Test\npublic void testInsertBlog() {\n    mapper.insert(\"标题\", \"副标题\", \"总结\", \"主要内容\", \"一小时以前\");\n}\n```\n这里我们测试了插入，如果是数据库本身配置没有问题的话，就已经完成了SpringBoot对数据库的操作了。\n\n## 结语\n其实Spring+Mybatis真的不难，在做之前感觉挺复杂畏难心理，实际做的时候发现和iOS数据库操作基本一致，基本都是三步：加入依赖，连接，写很容易理解的代码。\n","source":"_posts/SpringBoot和Mybatis.md","raw":"---\ntitle: SpringBoot和Mybatis\ndate: 2018-12-05 14:48:36\nexcerpt: 整个SpringBoot非常方便的可以实现Restful服务，然而在实际的应用中，实现Restful服务只是表面，如果需要运营起来，需要数据层的支持...\ncategory: Tec\nphotos: /images/Spring.png\n---\n## 前言\n整个SpringBoot非常方便的可以实现Restful服务，然而在实际的应用中，实现Restful服务只是表面，如果需要运营起来，需要数据层的支持。目前服务端的数据层包括关系型数据库例如MySQL与非关系型数据库例如MangoDB。非关系型数据库可能更加方便实现对象存储，对应用编码更加方便，但是对底层存储的理解不利，所以在刚开始还是推荐使用关系型数据库。\n这里我们将使用SpringBoot的Restful项目来结合Mybatis来实现一个有数据存储的Restful服务。\n## Mybatis是什么？\n[这里是Mybatis的介绍](http://www.mybatis.org/mybatis-3/zh/index.html)\nMyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。\n简言之：MyBatis可以方便的帮助JAVA应用使用关系型数据库。\n## 写代码之前\n在实际代码之前，我们需要给项目配置Mybatis，这里的项目管理使用的maven管理，有一个pom.xml来管理依赖，所以我们开始吧：\n给项目加入MyBatis依赖\n```\n<!--加入mybatis的支持-->\n<dependency>\n\t<groupId>org.mybatis.spring.boot</groupId>\n\t<artifactId>mybatis-spring-boot-starter</artifactId>\n\t<version>1.1.1</version>\n</dependency>\n```\n给项目加入MySQL连接的依赖\n```\n<!--加入mysql connector-->\n<dependency>\n  <groupId>mysql</groupId>\n  <artifactId>mysql-connector-java</artifactId>\n</dependency>\n```\n在加入依赖之后，需要做的是首先是配置数据库端口和用户\n当然，我这里使用的是MySQL来作为数据库。端口是3306，用户是root。\n\n所以开始配置：\n[这里是一个参考](https://blog.csdn.net/Winter_chen001/article/details/78622141)\n[这里是一个更好的参考](https://www.bysocket.com/?p=1610)\n\n\n完成数据库相关配置之后，我们需要在Spring项目中完成数据库的连接配置，不然Spring如何知道该连接哪个数据库呢。\n\n- 在application.properties中添加下面的数据（如果没有改文件，请在java平级建立一个resource文件夹下新建一个改文件）\n```\nserver.port=5000\n########################################################\n###datasource\n########################################################\nspring.datasource.url = jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=UTF-8\nspring.datasource.username = root\nspring.datasource.password = seven107001\nspring.datasource.driverClassName = com.mysql.jdbc.Driver\nspring.datasource.max-active=20\nspring.datasource.max-idle=8\nspring.datasource.min-idle=8\nspring.datasource.initial-size=10\n```\n然后SpringBoot就知道用什么（依赖）去连接哪个数据库（配置）了。\n\n## 开始编码吧！\n我们在源代码里面加入dao层，并加入一个Mapper。（注意mapper是一个Interface）\n![](/images/SpringBoot+Mybatis初探1.png)\n在Mapper中的代码如下：\n![](/images/SpringBoot+Mybatis初探2.png)\n```\npackage blog.dao;\n\nimport blog.domain.BlogItem;\nimport org.apache.ibatis.annotations.Insert;\nimport org.apache.ibatis.annotations.Mapper;\nimport org.apache.ibatis.annotations.Param;\nimport org.apache.ibatis.annotations.Select;\n\nimport java.util.LinkedList;\n\n@Mapper\npublic interface BlogMapper {\n    @Select(\"SELECT * FROM blogs\")\n    LinkedList<BlogItem> getAllBlogItem();\n\n    @Insert(\"INSERT INTO blogs (title, subTitle, summary, content, dateString) VALUES(#{title}, #{subTitle}, #{summary}, #{content}, #{dateString})\")\n    int insert(@Param(\"title\") String title,\n               @Param(\"subTitle\") String subTitle,\n               @Param(\"summary\") String summary,\n               @Param(\"content\") String content,\n               @Param(\"dateString\") String dateString);\n}\n```\n是不是很简单，我们已经用注释的方式完成了从数据库获取和插入的操作。\n\n## 测试\n1. 新建一个Test文件，并在类上加注释：\n```\n@RunWith(SpringRunner.class)\n@SpringBootTest(classes = App.class, webEnvironment = SpringBootTest.WebEnvironment.**RANDOM_PORT**)\n```\n因为使用SpringBoot来跑，所以这里测试需要有一个Application类传入，随机端口。\n\n2. 然后在类中加入一个自动注入的Mapper：\n```\n@Autowired\nprivate BlogMapper mapper;\n```\n这时候mapper我们就不需要自己去初始化了，毕竟自动注入\n\n3. 最后我们写一个测试方法吧：\n```\n@Test\npublic void testInsertBlog() {\n    mapper.insert(\"标题\", \"副标题\", \"总结\", \"主要内容\", \"一小时以前\");\n}\n```\n这里我们测试了插入，如果是数据库本身配置没有问题的话，就已经完成了SpringBoot对数据库的操作了。\n\n## 结语\n其实Spring+Mybatis真的不难，在做之前感觉挺复杂畏难心理，实际做的时候发现和iOS数据库操作基本一致，基本都是三步：加入依赖，连接，写很容易理解的代码。\n","slug":"SpringBoot和Mybatis","published":1,"updated":"2018-12-07T13:10:32.493Z","comments":1,"layout":"post","link":"","_id":"cjpe4g2mk00036fl3msypk573","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>整个SpringBoot非常方便的可以实现Restful服务，然而在实际的应用中，实现Restful服务只是表面，如果需要运营起来，需要数据层的支持。目前服务端的数据层包括关系型数据库例如MySQL与非关系型数据库例如MangoDB。非关系型数据库可能更加方便实现对象存储，对应用编码更加方便，但是对底层存储的理解不利，所以在刚开始还是推荐使用关系型数据库。<br>这里我们将使用SpringBoot的Restful项目来结合Mybatis来实现一个有数据存储的Restful服务。</p>\n<h2 id=\"Mybatis是什么？\"><a href=\"#Mybatis是什么？\" class=\"headerlink\" title=\"Mybatis是什么？\"></a>Mybatis是什么？</h2><p><a href=\"http://www.mybatis.org/mybatis-3/zh/index.html\" target=\"_blank\" rel=\"noopener\">这里是Mybatis的介绍</a><br>MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。<br>简言之：MyBatis可以方便的帮助JAVA应用使用关系型数据库。</p>\n<h2 id=\"写代码之前\"><a href=\"#写代码之前\" class=\"headerlink\" title=\"写代码之前\"></a>写代码之前</h2><p>在实际代码之前，我们需要给项目配置Mybatis，这里的项目管理使用的maven管理，有一个pom.xml来管理依赖，所以我们开始吧：<br>给项目加入MyBatis依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--加入mybatis的支持--&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;1.1.1&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>给项目加入MySQL连接的依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--加入mysql connector--&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>在加入依赖之后，需要做的是首先是配置数据库端口和用户<br>当然，我这里使用的是MySQL来作为数据库。端口是3306，用户是root。</p>\n<p>所以开始配置：<br><a href=\"https://blog.csdn.net/Winter_chen001/article/details/78622141\" target=\"_blank\" rel=\"noopener\">这里是一个参考</a><br><a href=\"https://www.bysocket.com/?p=1610\" target=\"_blank\" rel=\"noopener\">这里是一个更好的参考</a></p>\n<p>完成数据库相关配置之后，我们需要在Spring项目中完成数据库的连接配置，不然Spring如何知道该连接哪个数据库呢。</p>\n<ul>\n<li>在application.properties中添加下面的数据（如果没有改文件，请在java平级建立一个resource文件夹下新建一个改文件）<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.port=5000</span><br><span class=\"line\">########################################################</span><br><span class=\"line\">###datasource</span><br><span class=\"line\">########################################################</span><br><span class=\"line\">spring.datasource.url = jdbc:mysql://localhost:3306/blog?useUnicode=true&amp;characterEncoding=UTF-8</span><br><span class=\"line\">spring.datasource.username = root</span><br><span class=\"line\">spring.datasource.password = seven107001</span><br><span class=\"line\">spring.datasource.driverClassName = com.mysql.jdbc.Driver</span><br><span class=\"line\">spring.datasource.max-active=20</span><br><span class=\"line\">spring.datasource.max-idle=8</span><br><span class=\"line\">spring.datasource.min-idle=8</span><br><span class=\"line\">spring.datasource.initial-size=10</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>然后SpringBoot就知道用什么（依赖）去连接哪个数据库（配置）了。</p>\n<h2 id=\"开始编码吧！\"><a href=\"#开始编码吧！\" class=\"headerlink\" title=\"开始编码吧！\"></a>开始编码吧！</h2><p>我们在源代码里面加入dao层，并加入一个Mapper。（注意mapper是一个Interface）<br><img src=\"/images/SpringBoot+Mybatis初探1.png\" alt=\"\"><br>在Mapper中的代码如下：<br><img src=\"/images/SpringBoot+Mybatis初探2.png\" alt=\"\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package blog.dao;</span><br><span class=\"line\"></span><br><span class=\"line\">import blog.domain.BlogItem;</span><br><span class=\"line\">import org.apache.ibatis.annotations.Insert;</span><br><span class=\"line\">import org.apache.ibatis.annotations.Mapper;</span><br><span class=\"line\">import org.apache.ibatis.annotations.Param;</span><br><span class=\"line\">import org.apache.ibatis.annotations.Select;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.LinkedList;</span><br><span class=\"line\"></span><br><span class=\"line\">@Mapper</span><br><span class=\"line\">public interface BlogMapper &#123;</span><br><span class=\"line\">    @Select(&quot;SELECT * FROM blogs&quot;)</span><br><span class=\"line\">    LinkedList&lt;BlogItem&gt; getAllBlogItem();</span><br><span class=\"line\"></span><br><span class=\"line\">    @Insert(&quot;INSERT INTO blogs (title, subTitle, summary, content, dateString) VALUES(#&#123;title&#125;, #&#123;subTitle&#125;, #&#123;summary&#125;, #&#123;content&#125;, #&#123;dateString&#125;)&quot;)</span><br><span class=\"line\">    int insert(@Param(&quot;title&quot;) String title,</span><br><span class=\"line\">               @Param(&quot;subTitle&quot;) String subTitle,</span><br><span class=\"line\">               @Param(&quot;summary&quot;) String summary,</span><br><span class=\"line\">               @Param(&quot;content&quot;) String content,</span><br><span class=\"line\">               @Param(&quot;dateString&quot;) String dateString);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>是不是很简单，我们已经用注释的方式完成了从数据库获取和插入的操作。</p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><ol>\n<li>新建一个Test文件，并在类上加注释：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RunWith(SpringRunner.class)</span><br><span class=\"line\">@SpringBootTest(classes = App.class, webEnvironment = SpringBootTest.WebEnvironment.**RANDOM_PORT**)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>因为使用SpringBoot来跑，所以这里测试需要有一个Application类传入，随机端口。</p>\n<ol start=\"2\">\n<li>然后在类中加入一个自动注入的Mapper：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Autowired</span><br><span class=\"line\">private BlogMapper mapper;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这时候mapper我们就不需要自己去初始化了，毕竟自动注入</p>\n<ol start=\"3\">\n<li>最后我们写一个测试方法吧：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void testInsertBlog() &#123;</span><br><span class=\"line\">    mapper.insert(&quot;标题&quot;, &quot;副标题&quot;, &quot;总结&quot;, &quot;主要内容&quot;, &quot;一小时以前&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这里我们测试了插入，如果是数据库本身配置没有问题的话，就已经完成了SpringBoot对数据库的操作了。</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>其实Spring+Mybatis真的不难，在做之前感觉挺复杂畏难心理，实际做的时候发现和iOS数据库操作基本一致，基本都是三步：加入依赖，连接，写很容易理解的代码。</p>\n","site":{"data":{}},"more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>整个SpringBoot非常方便的可以实现Restful服务，然而在实际的应用中，实现Restful服务只是表面，如果需要运营起来，需要数据层的支持。目前服务端的数据层包括关系型数据库例如MySQL与非关系型数据库例如MangoDB。非关系型数据库可能更加方便实现对象存储，对应用编码更加方便，但是对底层存储的理解不利，所以在刚开始还是推荐使用关系型数据库。<br>这里我们将使用SpringBoot的Restful项目来结合Mybatis来实现一个有数据存储的Restful服务。</p>\n<h2 id=\"Mybatis是什么？\"><a href=\"#Mybatis是什么？\" class=\"headerlink\" title=\"Mybatis是什么？\"></a>Mybatis是什么？</h2><p><a href=\"http://www.mybatis.org/mybatis-3/zh/index.html\" target=\"_blank\" rel=\"noopener\">这里是Mybatis的介绍</a><br>MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。<br>简言之：MyBatis可以方便的帮助JAVA应用使用关系型数据库。</p>\n<h2 id=\"写代码之前\"><a href=\"#写代码之前\" class=\"headerlink\" title=\"写代码之前\"></a>写代码之前</h2><p>在实际代码之前，我们需要给项目配置Mybatis，这里的项目管理使用的maven管理，有一个pom.xml来管理依赖，所以我们开始吧：<br>给项目加入MyBatis依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--加入mybatis的支持--&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;1.1.1&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>给项目加入MySQL连接的依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--加入mysql connector--&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>在加入依赖之后，需要做的是首先是配置数据库端口和用户<br>当然，我这里使用的是MySQL来作为数据库。端口是3306，用户是root。</p>\n<p>所以开始配置：<br><a href=\"https://blog.csdn.net/Winter_chen001/article/details/78622141\" target=\"_blank\" rel=\"noopener\">这里是一个参考</a><br><a href=\"https://www.bysocket.com/?p=1610\" target=\"_blank\" rel=\"noopener\">这里是一个更好的参考</a></p>\n<p>完成数据库相关配置之后，我们需要在Spring项目中完成数据库的连接配置，不然Spring如何知道该连接哪个数据库呢。</p>\n<ul>\n<li>在application.properties中添加下面的数据（如果没有改文件，请在java平级建立一个resource文件夹下新建一个改文件）<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.port=5000</span><br><span class=\"line\">########################################################</span><br><span class=\"line\">###datasource</span><br><span class=\"line\">########################################################</span><br><span class=\"line\">spring.datasource.url = jdbc:mysql://localhost:3306/blog?useUnicode=true&amp;characterEncoding=UTF-8</span><br><span class=\"line\">spring.datasource.username = root</span><br><span class=\"line\">spring.datasource.password = seven107001</span><br><span class=\"line\">spring.datasource.driverClassName = com.mysql.jdbc.Driver</span><br><span class=\"line\">spring.datasource.max-active=20</span><br><span class=\"line\">spring.datasource.max-idle=8</span><br><span class=\"line\">spring.datasource.min-idle=8</span><br><span class=\"line\">spring.datasource.initial-size=10</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>然后SpringBoot就知道用什么（依赖）去连接哪个数据库（配置）了。</p>\n<h2 id=\"开始编码吧！\"><a href=\"#开始编码吧！\" class=\"headerlink\" title=\"开始编码吧！\"></a>开始编码吧！</h2><p>我们在源代码里面加入dao层，并加入一个Mapper。（注意mapper是一个Interface）<br><img src=\"/images/SpringBoot+Mybatis初探1.png\" alt=\"\"><br>在Mapper中的代码如下：<br><img src=\"/images/SpringBoot+Mybatis初探2.png\" alt=\"\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package blog.dao;</span><br><span class=\"line\"></span><br><span class=\"line\">import blog.domain.BlogItem;</span><br><span class=\"line\">import org.apache.ibatis.annotations.Insert;</span><br><span class=\"line\">import org.apache.ibatis.annotations.Mapper;</span><br><span class=\"line\">import org.apache.ibatis.annotations.Param;</span><br><span class=\"line\">import org.apache.ibatis.annotations.Select;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.LinkedList;</span><br><span class=\"line\"></span><br><span class=\"line\">@Mapper</span><br><span class=\"line\">public interface BlogMapper &#123;</span><br><span class=\"line\">    @Select(&quot;SELECT * FROM blogs&quot;)</span><br><span class=\"line\">    LinkedList&lt;BlogItem&gt; getAllBlogItem();</span><br><span class=\"line\"></span><br><span class=\"line\">    @Insert(&quot;INSERT INTO blogs (title, subTitle, summary, content, dateString) VALUES(#&#123;title&#125;, #&#123;subTitle&#125;, #&#123;summary&#125;, #&#123;content&#125;, #&#123;dateString&#125;)&quot;)</span><br><span class=\"line\">    int insert(@Param(&quot;title&quot;) String title,</span><br><span class=\"line\">               @Param(&quot;subTitle&quot;) String subTitle,</span><br><span class=\"line\">               @Param(&quot;summary&quot;) String summary,</span><br><span class=\"line\">               @Param(&quot;content&quot;) String content,</span><br><span class=\"line\">               @Param(&quot;dateString&quot;) String dateString);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>是不是很简单，我们已经用注释的方式完成了从数据库获取和插入的操作。</p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><ol>\n<li>新建一个Test文件，并在类上加注释：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RunWith(SpringRunner.class)</span><br><span class=\"line\">@SpringBootTest(classes = App.class, webEnvironment = SpringBootTest.WebEnvironment.**RANDOM_PORT**)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>因为使用SpringBoot来跑，所以这里测试需要有一个Application类传入，随机端口。</p>\n<ol start=\"2\">\n<li>然后在类中加入一个自动注入的Mapper：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Autowired</span><br><span class=\"line\">private BlogMapper mapper;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这时候mapper我们就不需要自己去初始化了，毕竟自动注入</p>\n<ol start=\"3\">\n<li>最后我们写一个测试方法吧：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void testInsertBlog() &#123;</span><br><span class=\"line\">    mapper.insert(&quot;标题&quot;, &quot;副标题&quot;, &quot;总结&quot;, &quot;主要内容&quot;, &quot;一小时以前&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这里我们测试了插入，如果是数据库本身配置没有问题的话，就已经完成了SpringBoot对数据库的操作了。</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>其实Spring+Mybatis真的不难，在做之前感觉挺复杂畏难心理，实际做的时候发现和iOS数据库操作基本一致，基本都是三步：加入依赖，连接，写很容易理解的代码。</p>\n"},{"title":"Hello World","excerpt":"","date":"2018-12-04T03:13:27.000Z","photos":["/images/helloworld.png"],"_content":"Hello World, 这里是白彬涵的个人博客。\n这里将记录白彬涵个人的一些技术总结和生活总结等。\n\n感谢你的访问。","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\nexcerpt: 这里是白彬涵的个人博客\ndate: 2018-12-04 11:13:27\nphotos: /images/helloworld.png\ncategory: Life\n---\nHello World, 这里是白彬涵的个人博客。\n这里将记录白彬涵个人的一些技术总结和生活总结等。\n\n感谢你的访问。","slug":"hello-world","published":1,"updated":"2018-12-07T14:07:35.585Z","comments":1,"layout":"post","link":"","_id":"cjpe4g2mn00056fl3j1ii2vnt","content":"<p>Hello World, 这里是白彬涵的个人博客。<br>这里将记录白彬涵个人的一些技术总结和生活总结等。</p>\n<p>感谢你的访问。</p>\n","site":{"data":{}},"more":"<p>Hello World, 这里是白彬涵的个人博客。<br>这里将记录白彬涵个人的一些技术总结和生活总结等。</p>\n<p>感谢你的访问。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjpe4g2m500006fl3qce1cxgx","category_id":"cjpe4g2mh00026fl38ru3xkwg","_id":"cjpe4g2mq00086fl39uo1ceg3"},{"post_id":"cjpe4g2mb00016fl3v4fx1q5q","category_id":"cjpe4g2mp00066fl3f7fe2zje","_id":"cjpe4g2mt000b6fl3m2k8tzn4"},{"post_id":"cjpe4g2mk00036fl3msypk573","category_id":"cjpe4g2mp00066fl3f7fe2zje","_id":"cjpe4g2mu000c6fl3fud0v95j"},{"post_id":"cjpe4g2mn00056fl3j1ii2vnt","category_id":"cjpe4g2mt000a6fl3fvaf9dzc","_id":"cjpe4g2mu000d6fl3c655ey3d"}],"PostTag":[{"post_id":"cjpe4g2mb00016fl3v4fx1q5q","tag_id":"cjpe4g2mm00046fl3q06whs0p","_id":"cjpe4g2mq00076fl3uwht43x4"}],"Tag":[{"name":"PROGRAMING/LINUX","_id":"cjpe4g2mm00046fl3q06whs0p"}]}}